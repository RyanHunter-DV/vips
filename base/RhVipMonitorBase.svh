`ifndef RhVipMonitorBase__svh
`define RhVipMonitorBase__svh
/************************************************************************************/
// Author: RyanHunter
// Created: 2022-12-21 03:32:45 -0800
// Description:
// This file is automatically generated by MDC-v2, any issues found
// here should be modified in its source markdown document the same
// dir structure in Git/Obsidian/...
/************************************************************************************/

class RhVipMonitorBase extends uvm_monitor;
	uvm_analysis_port #(RhResetTransBase) resetP;
	RhResetStateEnum currentResetState;
	bit resetEnabled = 1'b1;
	`uvm_component_utils_begin(RhVipMonitorBase)
	`uvm_component_utils_end
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual task waitResetStateChanged(input RhResetStateEnum c,output RhResetStateEnum s);
	extern virtual task run_phase(uvm_phase phase);
	extern virtual task mainProcess();
	extern task resetMonitor();
	extern function  new(string name="RhVipMonitorBase",uvm_component parent=null);
	extern virtual function void connect_phase(uvm_phase phase);
	extern function void resetDisable ();
	extern local task __mainProcess_guard__ ();
endclass
function void RhVipMonitorBase::resetDisable(); // ##{{{
	resetEnabled = 1'b0;
endfunction // ##}}}
function void RhVipMonitorBase::build_phase(uvm_phase phase);
	super.build_phase(phase);
	currentResetState = RhResetUnknow;
	resetP = new("resetP",this);
endfunction
task RhVipMonitorBase::waitResetStateChanged(input RhResetStateEnum c,output RhResetStateEnum s);
endtask
task RhVipMonitorBase::run_phase(uvm_phase phase);
	super.run_phase(phase);
	fork
		if (resetEnabled) resetMonitor();
		__mainProcess_guard__();
	join
endtask

task RhVipMonitorBase::__mainProcess_guard__();
	if (resetEnabled) begin
		process _thread;
		forever begin
			wait(currentResetState == RhResetInactive);
			fork 
				begin
					_thread = process::self();
					mainProcess();
				end
				begin
					wait(currentResetState==RhResetActive);
					_thread.kill();
				end
			join
			disable fork;
		end
	end else begin
		mainProcess();
	end
endtask

task RhVipMonitorBase::mainProcess();
endtask
task RhVipMonitorBase::resetMonitor();
	RhResetTransBase _t = new("initReset");
	_t.state = currentResetState;
	resetP.write(_t);
	forever begin
		RhResetTransBase updatedTrans = new("updatedReset");
		RhResetStateEnum s;
		`uvm_info("DEBUG",$sformatf("call waitResetStateChanged, with current state: %s",currentResetState.name()),UVM_LOW)
		waitResetStateChanged(currentResetState,s);
		currentResetState = s;
		updatedTrans.state = currentResetState;
		resetP.write(updatedTrans);
	end
endtask
function  RhVipMonitorBase::new(string name="RhVipMonitorBase",uvm_component parent=null);
	super.new(name,parent);
endfunction
function void RhVipMonitorBase::connect_phase(uvm_phase phase);
	super.connect_phase(phase);
endfunction

`endif
