`ifndef RhVipDriverBase__svh
`define RhVipDriverBase__svh
/************************************************************************************/
// Author: RyanHunter
// Created: 2022-12-21 03:32:45 -0800
// Description:
// This file is automatically generated by MDC-v2, any issues found
// here should be modified in its source markdown document the same
// dir structure in Git/Obsidian/...
/************************************************************************************/

class RhVipDriverBase #( type REQ=uvm_sequence_item,RSP=REQ) extends uvm_driver#(REQ,RSP);
	uvm_analysis_imp_reset #(RhResetTransBase,RhVipDriverBase#(REQ,RSP)) resetI;
	RhResetStateEnum resetState;
	process proc;
	`uvm_component_utils_begin(RhVipDriverBase#(REQ,RSP))
	`uvm_component_utils_end
	extern virtual task mainProcess();
	extern virtual function void build_phase(uvm_phase phase);
	extern virtual task run_phase(uvm_phase phase);
	extern local task __resetDetector__();
	extern function  new(string name="RhVipDriverBase",uvm_component parent=null);
	extern virtual function void connect_phase(uvm_phase phase);
	extern virtual function void write_reset(RhResetTransBase _tr);
	extern function void resetDisable ();
endclass
function void RhVipDriverBase::resetDisable(); // ##{{{
	resetState = RhResetInactive;
endfunction // ##}}}
task RhVipDriverBase::mainProcess();
	// override in sub classes
endtask
function void RhVipDriverBase::build_phase(uvm_phase phase);
	super.build_phase(phase);
	resetI = new("resetI",this);
endfunction
task RhVipDriverBase::run_phase(uvm_phase phase);
	super.run_phase(phase);
	// extra run code here
	fork
		__resetDetector__();
		forever begin
			wait(resetState == RhResetInactive);
			proc = process::self();
			mainProcess();
		end
	join
endtask
task RhVipDriverBase::__resetDetector__();
	forever begin
		wait(resetState == RhResetActive);
		if (proc!=null && proc.status != process::FINISHED) proc.kill();
		wait(resetState == RhResetInactive);
	end
endtask
function  RhVipDriverBase::new(string name="RhVipDriverBase",uvm_component parent=null);
	super.new(name,parent);
endfunction
function void RhVipDriverBase::connect_phase(uvm_phase phase);
	super.connect_phase(phase);
endfunction
function void RhVipDriverBase::write_reset(RhResetTransBase _tr);
	// extra code in write_reset, the input trans argument is _tr
	resetState = _tr.state;
endfunction

`endif
