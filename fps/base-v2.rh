## file to define a feature partition that enclose all basic uvc drivers
fp :base,:parent=>:vip,:container=>true

fp :driver, :parent=>:base do ##{
	|**configs|

	name     = configs[:name]
	req      = configs[:req]
	rsp      = configs[:rsp]
	resetImp = configs[:resetI]
	resetTr  = configs[:resetTr]

	sv.fileMacro {config :macro=>"#{name}__svh"}

	uvm.comp.declare :driver do ##{
		config :name=>name
		config :req =>req
		config :rsp =>rsp
		sv.field.declare 'rh_axi4_configBase cfg;'
		sv.field.declare 'process mainThread;'
		sv.field.declare 'uvm_event resetInactive;'
		sv.field.declare "#{resetImp}(#{resetTr},#{name}#(#{req},#{rsp})) resetI;"
	end ##}


	uvm.comp.utils do ##{
		config :comp =>"#{name}#(REQ,RSP)"
		uvm.utils.field_obj :name=>'resetInactive',:flag=>:allon
		uvm.utils.field_obj :name=>'cfg',:flag=>:allon
	end ##}

	uvm.comp.new do
		config :name=>name;
	end

	uvm.phase.build do
		uvm.tlm.aimp.create :name=>'resetI'
		uvm.misc.event.create :name=>'resetInactive'
	end
	sv.proc.task do
		config :name=>'mainProcess'
		config :args=>''
		config :virtual=>true
	end

	uvm.phase.run :rootfp=>root do |s|
		code='`uvm_info("DEBUG","entering run_phase ...",UVM_LOW)'
		ccode = sv.proc.foreverb( :rawcode=>true) { |s|
			lcode =<<-CODE
mainThread = process::self();
`uvm_info("DEBUG","waiting for resetInactive",UVM_LOW)
resetInactive.wait_trigger();
`uvm_info("DEBUG","resetInactive status reached",UVM_LOW)
mainProcess();
			CODE
			s.config :extra=>lcode
		}
		s.config :raw=>false
		s.config :extra=>code+"\n"+ccode
	end


	sv.endclass :rootfp=>root
	sv.fileMacroEnd :rootfp=>root

end ##}
