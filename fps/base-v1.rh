fp :base,:parent=>:vip,:container=>true

fp :driver, :parent=>:base do |s,**configs| ##{
	## TODO, check input args
	name = configs[:name];
	req  = configs[:req];
	rsp  = configs[:rsp];
	root = 'base.driver';

	sv.fileMacro :rootfp=>root do |s|
		s.config :macro => "#{name}__svh";
	end
	uvm.comp.declareDriver :rootfp=>root do|s|
		fields =<<~CODE
		rh_axi4_configBase cfg;
		process mainThread;
		uvm_event resetInactive;
		CODE
		s.config :name  =>name;
		s.config :req   => req;
		s.config :rsp   => rsp;
		s.config :extra => fields;
	end
	uvm.comp.utils :rootfp=>root do |s|
		f =<<-CODE
			`uvm_field_object(resetInactive,UVM_ALL_ON)
			`uvm_field_object(cfg,UVM_ALL_ON)
		CODE
		s.config :field=>f
		s.config :comp =>"#{name}#(REQ,RSP)"
	end
	uvm.comp.new :rootfp=>root do|s|
		s.config :name=>name;
	end
	uvm.phase.build :rootfp=>root do|s|
		c =<<-CODE
			resetI=new("resetI",this);
			resetInactive=new("ri");
		CODE
		s.config :extracode => c;
	end
	sv.proc.task :rootfp=>root do |s|
		s.config :name=>'mainProcess'
		s.config :args=>''
		s.config :virtual=>true
		s.config :extra=>''
	end
	sv.proc.func :rootfp=>root do |s|
		## TODO
	end
	uvm.phase.run :rootfp=>root do |s|
		code='`uvm_info("DEBUG","entering run_phase ...",UVM_LOW)'
		ccode = sv.proc.foreverb( :rawcode=>true) { |s|
			lcode =<<-CODE
mainThread = process::self();
`uvm_info("DEBUG","waiting for resetInactive",UVM_LOW)
resetInactive.wait_trigger();
`uvm_info("DEBUG","resetInactive status reached",UVM_LOW)
mainProcess();
			CODE
			s.config :extra=>lcode
		}
		s.config :raw=>false
		s.config :extra=>code+"\n"+ccode
	end


	sv.endclass :rootfp=>root
	sv.fileMacroEnd :rootfp=>root

end ##}
