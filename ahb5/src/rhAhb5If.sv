`ifndef rhAhb5If__sv
`define rhAhb5If__sv
/************************************************************************************/
// Author: RyanHunter
// Created: 2022-12-22 06:29:20 -0800
// Description:
// This file is automatically generated by MDC-v2, any issues found
// here should be modified in its source markdown document the same
// dir structure in Git/Obsidian/...
/************************************************************************************/

interface RhAhb5If #( AW=32,DW=32)(input logic HCLK,input logic HRESETN);
	// logic [AW-1:0] HADDR;
	// logic [1:0] HTRANS;
	// logic [2:0] HBURST;
	// logic [3:0] HMASTER;
	// logic [2:0] HSIZE;
	// logic [7:0] HPROT;
	// logic [DW-1:0] HWDATA;
	// logic HMASTLOCK;
	// logic HNONSEC;
	// logic HEXCL;
	// logic HWRITE;
	// logic HRESP;
	// logic [DW-1:0] HRDATA;
	// logic HREADY;
	// logic HEXOKAY;

	// @RyanH, for tracing reset, the rhuDumper didn't support dumping input signals
	`rhuLogicSignal(HRESETN_in,1)
	assign HRESETN_in = HRESETN;

	`rhuLogicSignal(HADDR,AW)
	`rhuLogicSignal(HBURST,3)
	`rhuLogicSignal(HTRANS,2)
	`rhuLogicSignal(HMASTER,4)
	`rhuLogicSignal(HSIZE,3)
	`rhuLogicSignal(HPROT,8)
	`rhuLogicSignal(HWDATA,DW)
	`rhuLogicSignal(HMASTLOCK,1)
	`rhuLogicSignal(HNONSEC,1)
	`rhuLogicSignal(HEXCL,1)
	`rhuLogicSignal(HWRITE,1)
	`rhuLogicSignal(HRESP,1)
	`rhuLogicSignal(HRDATA,DW)
	`rhuLogicSignal(HREADY,1)
	`rhuLogicSignal(HEXOKAY,1)
	`rhuDumperPostProcess

	class randomObject;
		// set hrdata randomly
		rand logic [DW-1:0] hrdata;
	endclass

	function logic[DW-1:0] getValue(string name);
		logic[DW-1:0] lvalue='h0;
		case (name)
			"HREADY": lvalue[0] = HREADY;
		endcase
		return lvalue;
	endfunction
	task automatic randomHRDATA();
		randomObject ro = new();ro.randomize();
		HRDATA <= ro.hrdata;
	endtask
	task clock(int cycle=1); repeat (cycle) @(posedge HCLK); endtask
	task sync(string signal,logic[DW-1:0] target);
		logic [DW-1:0] v = getValue(signal);
		while (v !== target) begin
			clock();
			v = getValue(signal);
		end
	endtask


endinterface

`endif
