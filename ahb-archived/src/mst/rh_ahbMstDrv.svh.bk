`ifndef rh_ahbMstDrv__svh
`define rh_ahbMstDrv__svh

class rh_ahbMstDrv #(type REQ=rh_ahbMstTrans,RSP=REQ)
	extends rh_ahbDrvBase#(REQ,RSP); // {


	uvm_analysis_imp_rsp #(RSP,rh_ahbMstDrv) rspI;

	RSP rspI_responseQue[$];
	REQ controlQue[$];
	REQ writeDataQue[$];

	// @RyanH credit for sending request, default is 2
	local int credit = 2;


	`uvm_component_utils_begin(rh_ahbMstDrv)
	`uvm_component_utils_end

	function new (string name="rh_ahbMstDrv", uvm_component parent=null);
		super.new(name,parent);
	endfunction

	extern function void build_phase(uvm_phase phase);

	extern virtual task mainProcessTask;

	extern function int getCredit();
	extern task waitCreditAtLeast(input int min=0);

endclass // }

task waitCreditAtLeast(input int min=0); // {
	wait (credit >= min);
endtask // }

function int rh_ahbMstDrv::getCredit(); // {
	return credit;
endfunction // }

function void rh_ahbMstDrv::build_phase(uvm_phase phase); // {
	super.build_phase(phase);

endfunction // }




task rh_ahbMstDrv::mainProcessTask; // {
	// get next item
	// wait delay
	// if queue valid, then join_none: issue request
	//
	fork
		forever getNextItem();
		forever processControlChannel();
		forever processDataChannel();
	join
endtask // }

task rh_ahbMstDrv::getNextItem(); // {
	seq_item_port.get_next_item(req);
	config.vif.waitCycles(req.delay);
	// pushTo ControlChannel
	controlQue.push_back(req);
	if (req.needRsp) waitResponse();
	seq_item_port.item_done(rsp);
	req = null;
endtask // }

task rh_ahbMstDrv::processControlChannel(); // {
	REQ _req;
	wait (controlQue.size());
	_req = controlQue.pop_front();

	config.vif.waitControlChannelReady();
	config.vif.driveControlChannel(
		req.burst,
		req.size,
		req.trans,
		req.addr,
		... // TODO
	);

	if (_req.isWrite()) writeDataQue.push_back(_req);

endtask // }

// this channel in master driver is for driving wdata only
task rh_ahbMstDrv::processDataChannel(); // {
	REQ _req;
	wait (writeDataQue.size());
	_req = writeDataQue.pop_front();
	config.vif.waitDataChannelReady();
	config.vif.driveWDataChannel(_req.data);
endtask // }

task rh_ahbMstDrv::waitResponse(); // {
	RSP _rspI;
	wait (rspI_responseQue.size());
	_rspI = rspI_responseQue.pop_front();
	rsp = new($sformatf("rsp_%0d",req.get_transaction_id()));
	rsp.set_id_info(req);
	rsp.copyResponseInfo(_rspI); // TODO, API defined in RSP
endtask // }


`endif
